{
  "name": "/rom.rs",
  "content": "#![no_std]\n#![no_main]\n\nuse gba::prelude::*;\n\n#[panic_handler]\n#[allow(unused)]\nfn panic(info: &core::panic::PanicInfo) -> ! {\n // This kills the emulation with a message if we're running inside an\n // emulator we support (mGBA or NO$GBA), or just crashes the game if we\n // aren't.\n //fatal!(\"{}\", info);\n\n loop {\n DISPCNT.read();\n }\n}\n\n/// Performs a busy loop until VBlank starts.\n///\n/// This is very inefficient, and please keep following the lessons until we\n/// cover how interrupts work!\npub fn spin_until_vblank() {\n while VCOUNT.read() < 160 {}\n}\n\n/// Performs a busy loop until VDraw starts.\n///\n/// This is very inefficient, and please keep following the lessons until we\n/// cover how interrupts work!\npub fn spin_until_vdraw() {\n while VCOUNT.read() >= 160 {}\n}\n\n#[no_mangle]\npub fn main() -> ! {\n const SETTING: DisplayControl = DisplayControl::new().with_display_mode(3).with_display_bg2(true);\n DISPCNT.write(SETTING);\n\n let mut px = mode3::WIDTH / 2;\n let mut py = mode3::HEIGHT / 2;\n let mut color = Color::from_rgb(31, 3, 1);\n\n loop {\n // read our keys for this frame\n let keys: Keys = KEYINPUT.read().into();\n\n // adjust game state and wait for vblank\n px = px.wrapping_add((2 * keys.x_signum()) as usize);\n py = py.wrapping_add((2 * keys.y_signum()) as usize);\n if keys.l() {\n color = Color(color.0.rotate_left(5));\n }\n if keys.r() {\n color = Color(color.0.rotate_right(5));\n }\n\n // now we wait\n spin_until_vblank();\n\n // draw the new game and wait until the next frame starts.\n if (px + 1) >= mode3::WIDTH || (py + 1) >= mode3::HEIGHT {\n // out of bounds, reset the screen and position.\n mode3::dma3_clear_to(Color::from_rgb(0, 0, 0));\n px = mode3::WIDTH / 2;\n py = mode3::HEIGHT / 2;\n color = Color(color.0.rotate_left(7));\n } else {\n // draw the new part of the line\n mode3::bitmap_xy(px, py).write(color);\n mode3::bitmap_xy(px, py + 1).write(color);\n mode3::bitmap_xy(px + 1, py).write(color);\n mode3::bitmap_xy(px + 1, py + 1).write(color);\n }\n\n // now we wait again\n spin_until_vdraw();\n }\n}\n"
}